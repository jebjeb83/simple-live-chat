{"version":3,"sources":["components/Body.jsx","components/ChatLayout.jsx","components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["Body","props","ListGroup","variant","messages","map","message","index","Item","key","className","dateCreated","toLocaleString","username","content","style","card","width","cardBody","maxHeight","height","textAlign","overflow","display","flexDirection","footer","padding","ChatLayout","Card","bg","border","Header","Form","onSubmit","e","preventDefault","chatsUsername","isAnonymous","messageData","Date","setMessages","setMessage","InputGroup","size","FormControl","value","onChange","event","target","placeholder","aria-label","Append","Button","type","onClick","setIsAnonymous","href","setIsLoggedIn","Login","color","Group","controlId","Label","Control","setUsername","App","useState","isLoggedIn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.62d5e6aa.chunk.js","sourcesContent":["import React from 'react'\nimport { ListGroup } from 'react-bootstrap'\n\nconst Body = (props) => {\n  return (\n    <div>\n      <ListGroup variant=\"flush\">\n        {\n          props.messages.map((message, index) =>\n          <ListGroup.Item key={index} className='message' >\n              <div>\n                {message.dateCreated.toLocaleString()}\n              </div>\n            {message.username}: {message.content}\n          </ListGroup.Item>\n          )\n        }\n      </ListGroup>\n    </div>\n  )\n}\n\nexport default Body\n","import React from 'react'\nimport { \n  Card,\n  InputGroup,\n  FormControl,\n  Button,\n  Form\n} from 'react-bootstrap'\n\nimport ChatBody from './Body'\n\nconst style = {\n  card: {\n    width: '30rem'\n  },\n  cardBody: {\n    maxHeight: '60vmin',\n    height: '60vmin',\n    textAlign: 'left',\n    overflow: 'auto',\n    display: 'flex',\n    flexDirection: 'column-reverse'\n  },\n  footer: {\n    textAlign: 'left',\n    padding: '0px 0px 10px 3px'\n  }\n}\n\nconst ChatLayout = (props) => {\n  return (\n    <div>\n      <Card\n        bg='light'\n        border='light'\n        style={style.card}\n      >\n      <Card.Header>Live Chat</Card.Header>\n      <Card.Body style={style.cardBody}>\n        <ChatBody messages={props.messages}/>\n      </Card.Body>\n    <Form onSubmit={(e) => {\n      e.preventDefault()\n      if (!props.message) {\n        return\n      } else {\n        let chatsUsername = props.isAnonymous ? 'Anonymous' : props.username\n        let messageData = {\n          dateCreated: new Date(),\n          username: chatsUsername,\n          content: props.message\n        }\n        props.setMessages([...props.messages, messageData])\n        props.setMessage('')\n      }\n    }}>\n      <InputGroup size='sm'>\n          <FormControl\n            value={props.message}\n            onChange={(event) => props.setMessage(event.target.value)}\n            placeholder=\"Type your message here....\"\n            aria-label=\"Amount (to the nearest dollar)\"\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-primary\" type='submit'>Send</Button>\n          </InputGroup.Append>\n      </InputGroup>\n  <footer className='blockquote-footer' style={style.footer}>\n    Chat as <cite>Anonymous</cite>\n    <input\n      type='checkbox'\n      value={props.isAnonymous} \n      onClick={() => {\n        props.setIsAnonymous(!props.isAnonymous)\n      }}></input>\n    <a\n      href='#'\n      onClick={() => props.setIsLoggedIn(false)\n    }>Logout</a>\n    </footer>\n    </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport default ChatLayout\n","import React from 'react'\nimport {\n  Form,\n  Button\n} from 'react-bootstrap'\nconst Login = (props) => {\n  return (\n    <div style={{ color: 'white' }}>\n      <Form onSubmit={(event) => {\n        event.preventDefault()\n        props.setIsLoggedIn(true)\n      }}>\n        <Form.Group controlId=\"formBasicEmail\">\n        <Form.Label>Username</Form.Label>\n        <Form.Control \n          placeholder=\"Enter username\"\n          value={props.username}\n          onChange={(e) => \n            props.setUsername(e.target.value)\n          }\n        />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Login\n        </Button>\n      </Form>\n    </div>\n  )\n}\n\nexport default Login\n","import React, { useState } from 'react';\nimport ChatLayout from './components/ChatLayout'\nimport Login from './components/Login'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [username, setUsername] = useState('')\n  const [isAnonymous, setIsAnonymous] = useState(false)\n  const [messages, setMessages] = useState([])\n  const [message, setMessage] = useState('')\n  return (\n    <div className='App'>\n      {\n        !isLoggedIn ? \n          <Login\n            setIsLoggedIn={setIsLoggedIn}\n            username={username}\n            setUsername={setUsername}\n          /> : \n          <ChatLayout\n            setIsLoggedIn={setIsLoggedIn}\n            username={username}\n            setUsername={setUsername}\n            isAnonymous={isAnonymous}\n            setIsAnonymous={setIsAnonymous}\n            messages={messages}\n            setMessages={setMessages}\n            message={message}\n            setMessage={setMessage}\n          />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}